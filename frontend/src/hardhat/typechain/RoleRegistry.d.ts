/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RoleRegistryInterface extends ethers.utils.Interface {
  functions: {
    "getManager(address)": FunctionFragment;
    "hasRole(address,bytes32,address)": FunctionFragment;
    "removeRole(address,bytes32,address)": FunctionFragment;
    "setManager(address,address)": FunctionFragment;
    "setRole(address,bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRole",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRole",
    values: [string, BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "getManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRole", data: BytesLike): Result;

  events: {
    "ManagerChanged(address,address)": EventFragment;
    "RoleRemoved(address,bytes32,address)": EventFragment;
    "RoleSet(address,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleSet"): EventFragment;
}

export class RoleRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RoleRegistryInterface;

  functions: {
    getManager(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getManager(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    hasRole(
      _roleProvider: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(address,bytes32,address)"(
      _roleProvider: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    removeRole(
      _addr: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeRole(address,bytes32,address)"(
      _addr: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setManager(
      _addr: string,
      _newManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setManager(address,address)"(
      _addr: string,
      _newManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRole(
      _addr: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRole(address,bytes32,address)"(
      _addr: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getManager(_addr: string, overrides?: CallOverrides): Promise<string>;

  "getManager(address)"(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  hasRole(
    _roleProvider: string,
    _role: BytesLike,
    _roleHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(address,bytes32,address)"(
    _roleProvider: string,
    _role: BytesLike,
    _roleHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeRole(
    _addr: string,
    _role: BytesLike,
    _roleHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeRole(address,bytes32,address)"(
    _addr: string,
    _role: BytesLike,
    _roleHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setManager(
    _addr: string,
    _newManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setManager(address,address)"(
    _addr: string,
    _newManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRole(
    _addr: string,
    _role: BytesLike,
    _roleHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRole(address,bytes32,address)"(
    _addr: string,
    _role: BytesLike,
    _roleHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getManager(_addr: string, overrides?: CallOverrides): Promise<string>;

    "getManager(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    hasRole(
      _roleProvider: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(address,bytes32,address)"(
      _roleProvider: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeRole(
      _addr: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeRole(address,bytes32,address)"(
      _addr: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setManager(
      _addr: string,
      _newManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setManager(address,address)"(
      _addr: string,
      _newManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRole(
      _addr: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRole(address,bytes32,address)"(
      _addr: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ManagerChanged(addr: string | null, newManager: string | null): EventFilter;

    RoleRemoved(
      addr: string | null,
      _role: BytesLike | null,
      roleHolder: string | null
    ): EventFilter;

    RoleSet(
      addr: string | null,
      _role: BytesLike | null,
      roleHolder: string | null
    ): EventFilter;
  };

  estimateGas: {
    getManager(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getManager(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      _roleProvider: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(address,bytes32,address)"(
      _roleProvider: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeRole(
      _addr: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeRole(address,bytes32,address)"(
      _addr: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setManager(
      _addr: string,
      _newManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setManager(address,address)"(
      _addr: string,
      _newManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRole(
      _addr: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRole(address,bytes32,address)"(
      _addr: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getManager(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getManager(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      _roleProvider: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(address,bytes32,address)"(
      _roleProvider: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeRole(
      _addr: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeRole(address,bytes32,address)"(
      _addr: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setManager(
      _addr: string,
      _newManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setManager(address,address)"(
      _addr: string,
      _newManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRole(
      _addr: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRole(address,bytes32,address)"(
      _addr: string,
      _role: BytesLike,
      _roleHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
